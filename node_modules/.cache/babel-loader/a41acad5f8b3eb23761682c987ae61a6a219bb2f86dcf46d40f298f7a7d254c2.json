{"ast":null,"code":"const initialState = {\n  players: [{\n    name: \"Yugi Muto\",\n    pv: 100,\n    pvMax: 100,\n    mana: 30,\n    manaMax: 30,\n    id: 1,\n    image: 'img/muto.gif',\n    abilities: [{\n      name: \"Frapper\",\n      damage: 10,\n      manaCost: 15,\n      type: \"damage\"\n    }, {\n      name: \"Guérir\",\n      heal: +10,\n      manaCost: 10,\n      type: \"heal\"\n    }, {\n      name: \"Attaque Special\",\n      damage: 15,\n      manaCost: 30,\n      type: \"fireBall\"\n    }, {\n      name: \"Recuperation Mana\",\n      mana: 30,\n      manaCost: 30,\n      // Utilisez un nombre négatif pour déduire le coût de mana\n      type: \"mana\"\n    }]\n  }, {\n    name: \"Seto Kaiba\",\n    pv: 100,\n    pvMax: 100,\n    mana: 30,\n    manaMax: 30,\n    id: 2,\n    image: 'img/kaiba.gif',\n    abilities: [{\n      name: \"Frapper\",\n      damage: 10,\n      manaCost: 15,\n      type: \"damage\"\n    }, {\n      name: \"Guérir\",\n      heal: +10,\n      manaCost: 10,\n      type: \"heal\"\n    }, {\n      name: \"Attaque Special\",\n      damage: 15,\n      manaCost: 30,\n      type: \"fireBall\"\n    }, {\n      name: \"Recuperation Mana\",\n      mana: 30,\n      manaCost: 30,\n      // Utilisez un nombre négatif pour déduire le coût de mana\n      type: \"mana\"\n    }]\n  }, {\n    name: \"Yuya Sakaki\",\n    pv: 100,\n    pvMax: 100,\n    mana: 30,\n    manaMax: 30,\n    id: 3,\n    image: 'img/sakaki.gif',\n    abilities: [{\n      name: \"Frapper\",\n      damage: 10,\n      manaCost: 15,\n      type: \"damage\"\n    }, {\n      name: \"Guérir\",\n      heal: +10,\n      manaCost: 10,\n      type: \"heal\"\n    }, {\n      name: \"Attaque Special\",\n      damage: 15,\n      manaCost: 30,\n      type: \"fireBall\"\n    }, {\n      name: \"Recuperation Mana\",\n      mana: 30,\n      manaCost: 30,\n      // Utilisez un nombre négatif pour déduire le coût de mana\n      type: \"mana\"\n    }]\n  }, {\n    name: \"Anzu Mazaki\",\n    pv: 100,\n    pvMax: 100,\n    mana: 30,\n    manaMax: 30,\n    id: 4,\n    image: 'img/mazaki.gif',\n    abilities: [{\n      name: \"Frapper\",\n      damage: 10,\n      manaCost: 15,\n      type: \"damage\"\n    }, {\n      name: \"Guérir\",\n      heal: +10,\n      manaCost: 10,\n      type: \"heal\"\n    }, {\n      name: \"Attaque Special\",\n      damage: 15,\n      manaCost: 30,\n      type: \"fireBall\"\n    }, {\n      name: \"Recuperation Mana\",\n      mana: +30,\n      manaCost: 30,\n      // Utilisez un nombre négatif pour déduire le coût de mana\n      type: \"mana\"\n    }]\n  }],\n  monster: {\n    pv: 800,\n    pvMax: 800\n  },\n  turn: 1,\n  currentTurnPlayer: 1 // supposez que le premier joueur commence\n};\nfunction rootReducer(state = initialState, action) {\n  const currentPlayerId = state.currentTurnPlayer;\n  switch (action.type) {\n    case \"HIT_MONSTER\":\n      const {\n        monsterDamage\n      } = action.payload;\n      return {\n        ...state,\n        monster: {\n          ...state.monster,\n          pv: Math.max(state.monster.pv - monsterDamage, 0)\n        }\n      };\n    case \"HIT_PLAYER\":\n      const {\n        damage,\n        playerId,\n        manaReduction\n      } = action.payload;\n      return {\n        ...state,\n        players: state.players.map(player => {\n          if (player.id === playerId) {\n            return {\n              ...player,\n              pv: Math.max(player.pv - damage, 0),\n              mana: Math.max(player.mana - manaReduction, 0)\n            };\n          }\n          return player;\n        })\n      };\n    case \"HEAL_PLAYER\":\n      const {\n        healPlayer\n      } = action.payload;\n      return {\n        ...state,\n        players: state.players.map(player => {\n          if (player.id === healPlayer.id) {\n            return {\n              ...player,\n              pv: Math.min(player.pv + healPlayer.heal, player.pvMax)\n            };\n          }\n          return player;\n        })\n      };\n    case \"FIRE_BALL\":\n      const currentPlayer = state.players.find(player => player.id === currentPlayerId);\n      if (currentPlayer && !currentPlayer.hasPerformedAction) {\n        const {\n          fireBall\n        } = action.payload;\n        const updatedPlayers = state.players.map(player => player.id === fireBall.id ? {\n          ...player,\n          pv: Math.max(player.pv - fireBall.damage, 0),\n          mana: Math.max(player.mana - fireBall.manaCost, 0),\n          hasPerformedAction: true\n        } : player);\n        return {\n          ...state,\n          players: updatedPlayers,\n          monster: {\n            ...state.monster,\n            pv: Math.max(state.monster.pv - fireBall.damage, 0)\n          }\n        };\n      }\n      return state;\n    case \"MANA_PLAYER\":\n      const {\n        manaPlayer\n      } = action.payload;\n      return {\n        ...state,\n        players: state.players.map(player => {\n          if (player.id === manaPlayer.id) {\n            return {\n              ...player,\n              mana: Math.min(player.mana + manaPlayer.mana, player.manaMax)\n            };\n          }\n          return player;\n        })\n      };\n    case \"NEXT_TURN\":\n      const resetPlayers = state.players.map(player => ({\n        ...player,\n        hasPerformedAction: false\n      }));\n      return {\n        ...state,\n        turn: state.turn + 1,\n        players: resetPlayers\n      };\n    default:\n      return state;\n  }\n}\nexport default rootReducer;","map":{"version":3,"names":["initialState","players","name","pv","pvMax","mana","manaMax","id","image","abilities","damage","manaCost","type","heal","monster","turn","currentTurnPlayer","rootReducer","state","action","currentPlayerId","monsterDamage","payload","Math","max","playerId","manaReduction","map","player","healPlayer","min","currentPlayer","find","hasPerformedAction","fireBall","updatedPlayers","manaPlayer","resetPlayers"],"sources":["/home/g404/Documents/Random-Rumblee/src/store/rootReducer.js"],"sourcesContent":["\nconst initialState = {\n  players: [\n    {\n      name: \"Yugi Muto\",\n      pv: 100,\n      pvMax: 100,\n      mana: 30,\n      manaMax: 30,\n      id: 1,\n      image: 'img/muto.gif',\n      abilities: [\n        {\n          name:\n            \"Frapper\",\n          damage: 10,\n          manaCost: 15,\n          type: \"damage\"\n        },\n        {\n          name: \"Guérir\",\n          heal: +10,\n          manaCost: 10,\n          type: \"heal\"\n        },\n        {\n          name: \"Attaque Special\",\n          damage: 15,\n          manaCost: 30,\n          type: \"fireBall\"\n        },\n        {\n          name: \"Recuperation Mana\",\n          mana: 30,\n          manaCost: 30, // Utilisez un nombre négatif pour déduire le coût de mana\n          type: \"mana\"\n        }\n\n      ],\n    },\n    {\n      name: \"Seto Kaiba\",\n      pv: 100,\n      pvMax: 100,\n      mana: 30,\n      manaMax: 30,\n      id: 2,\n      image: 'img/kaiba.gif',\n      abilities: [\n        {\n          name:\n            \"Frapper\",\n          damage: 10,\n          manaCost: 15,\n          type: \"damage\"\n        },\n        {\n          name: \"Guérir\",\n          heal: +10,\n          manaCost: 10,\n          type: \"heal\"\n        },\n        {\n          name: \"Attaque Special\",\n          damage: 15,\n          manaCost: 30,\n          type: \"fireBall\"\n        },\n        {\n          name: \"Recuperation Mana\",\n          mana: 30,\n          manaCost: 30, // Utilisez un nombre négatif pour déduire le coût de mana\n          type: \"mana\"\n        }\n\n      ],\n    },\n    {\n      name: \"Yuya Sakaki\",\n      pv: 100,\n      pvMax: 100,\n      mana: 30,\n      manaMax: 30,\n      id: 3,\n      image: 'img/sakaki.gif',\n      abilities: [\n        {\n          name:\n            \"Frapper\",\n          damage: 10,\n          manaCost: 15,\n          type: \"damage\"\n        },\n        {\n          name: \"Guérir\",\n          heal: +10,\n          manaCost: 10,\n          type: \"heal\"\n        },\n        {\n          name: \"Attaque Special\",\n          damage: 15,\n          manaCost: 30,\n          type: \"fireBall\"\n        },\n        {\n          name: \"Recuperation Mana\",\n          mana: 30,\n          manaCost: 30, // Utilisez un nombre négatif pour déduire le coût de mana\n          type: \"mana\"\n        }\n\n      ],\n    },\n    \n    {\n      name: \"Anzu Mazaki\",\n      pv: 100,\n      pvMax: 100,\n      mana: 30,\n      manaMax: 30,\n      id: 4,\n      image: 'img/mazaki.gif',\n      abilities: [\n        {\n          name:\n            \"Frapper\",\n          damage: 10,\n          manaCost: 15,\n          type: \"damage\"\n        },\n        {\n          name: \"Guérir\",\n          heal: +10,\n          manaCost: 10,\n          type: \"heal\"\n        },\n        {\n          name: \"Attaque Special\",\n          damage: 15,\n          manaCost: 30,\n          type: \"fireBall\"\n        },\n        {\n          name: \"Recuperation Mana\",\n          mana: +30,\n          manaCost: 30, // Utilisez un nombre négatif pour déduire le coût de mana\n          type: \"mana\"\n        }\n\n      ],\n    },\n  ],\n\n  monster: {\n    pv: 800,\n    pvMax: 800,\n  },\n  turn: 1,\n  currentTurnPlayer: 1, // supposez que le premier joueur commence\n};\n\nfunction rootReducer(state = initialState, action) {\n  const currentPlayerId = state.currentTurnPlayer;\n\n  switch (action.type) {\n    case \"HIT_MONSTER\":\n      const { monsterDamage } = action.payload;\n      return {\n        ...state,\n        monster: {\n          ...state.monster,\n          pv: Math.max(state.monster.pv - monsterDamage, 0),\n        },\n      };\n\n    \n   \n    case \"HIT_PLAYER\":\n      const { damage, playerId, manaReduction } = action.payload;\n      return {\n        ...state,\n        players: state.players.map((player) => {\n          if (player.id === playerId) {\n            return {\n              ...player,\n              pv: Math.max(player.pv - damage, 0),\n              mana: Math.max(player.mana - manaReduction, 0),\n            };\n          }\n          return player;\n        }),\n      };\n    \n\n    case \"HEAL_PLAYER\":\n      const { healPlayer } = action.payload;\n      return {\n        ...state,\n        players: state.players.map((player) => {\n          if (player.id === healPlayer.id) {\n            return {\n              ...player,\n              pv: Math.min(player.pv + healPlayer.heal, player.pvMax),\n            };\n          }\n          return player;\n        }),\n      };\n\n      case \"FIRE_BALL\":\n        const currentPlayer = state.players.find(player => player.id === currentPlayerId);\n      \n        if (currentPlayer && !currentPlayer.hasPerformedAction) {\n          const { fireBall } = action.payload;\n          const updatedPlayers = state.players.map(player =>\n            player.id === fireBall.id\n              ? {\n                ...player,\n                pv: Math.max(player.pv - fireBall.damage, 0),\n                mana: Math.max(player.mana - fireBall.manaCost, 0),\n                hasPerformedAction: true,\n              }\n              : player\n          );\n      \n          return {\n            ...state,\n            players: updatedPlayers,\n            monster: {\n              ...state.monster,\n              pv: Math.max(state.monster.pv - fireBall.damage, 0),\n            },\n          };\n        }\n        return state;\n      \n\n      case \"MANA_PLAYER\":\n        const { manaPlayer } = action.payload;\n        return {\n          ...state,\n          players: state.players.map((player) => {\n            if (player.id === manaPlayer.id) {\n              return {\n                ...player,\n                mana: Math.min(player.mana + manaPlayer.mana, player.manaMax),\n              };\n            }\n            return player;\n          }),\n        };\n      \n\n        case \"NEXT_TURN\":\n          const resetPlayers = state.players.map(player => ({\n            ...player,\n            hasPerformedAction: false,\n          }));\n        \n          return {\n            ...state,\n            turn: state.turn + 1,\n            players: resetPlayers,\n          };\n        \n\n\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}