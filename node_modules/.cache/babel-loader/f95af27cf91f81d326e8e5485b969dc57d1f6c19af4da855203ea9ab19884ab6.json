{"ast":null,"code":"var _jsxFileName = \"/home/g404/Documents/Random-Rumblee/src/Components/PlayerCard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport ButtonCapacity from \"./ButtonCapacity\";\nimport ProgressBar from \"./ProgressBar\";\nimport \"./Game.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerCard = ({\n  player,\n  onPlayerHit\n}) => {\n  _s();\n  const [isLarge, setIsLarge] = useState(true);\n  const [isHit, setIsHit] = useState(false);\n  const [isHeal, setIsHeal] = useState(false);\n  useEffect(() => {\n    if (isHit) {\n      setTimeout(() => {\n        setIsHit(false);\n        setIsHeal(false);\n      }, 500);\n    }\n  }, [isHit]);\n  const handleHit = () => {\n    setIsHit(true);\n    setIsHeal(true);\n    onPlayerHit(player);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `col-sm-3 card ${isLarge ? 'player-large' : ''} ${isHit ? 'hit-animation' : ''} ${isHit ? 'hit' : ''} ${isH ? 'hit-animation' : ''}${isHeal ? 'heal' : ''} `,\n    id: `joueur${player.id}`,\n    onClick: handleHit,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: `player-image ${isLarge ? 'player-image-large' : ''}`,\n        src: player.image ? require(`../assets/${player.image}`) : '',\n        alt: player.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-title\",\n        children: player.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        pv: player.pv,\n        pvMax: player.pvMax,\n        faType: \"fa-heart\",\n        barName: \" : pv \",\n        bgType: \"bg-danger\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        pv: player.mana,\n        pvMax: player.manaMax,\n        faType: \"fa-fire-alt\",\n        barName: \" : mana \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: player.abilities.map((ability, index) => /*#__PURE__*/_jsxDEV(ButtonCapacity, {\n          player: player,\n          ability: ability\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayerCard, \"JR87+/jbe+3EZfG1Jkez7dfnF9k=\");\n_c = PlayerCard;\nexport default PlayerCard;\nvar _c;\n$RefreshReg$(_c, \"PlayerCard\");","map":{"version":3,"names":["React","useEffect","useState","ButtonCapacity","ProgressBar","jsxDEV","_jsxDEV","PlayerCard","player","onPlayerHit","_s","isLarge","setIsLarge","isHit","setIsHit","isHeal","setIsHeal","setTimeout","handleHit","className","isH","id","onClick","children","src","image","require","alt","name","fileName","_jsxFileName","lineNumber","columnNumber","pv","pvMax","faType","barName","bgType","mana","manaMax","abilities","map","ability","index","_c","$RefreshReg$"],"sources":["/home/g404/Documents/Random-Rumblee/src/Components/PlayerCard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ButtonCapacity from \"./ButtonCapacity\";\nimport ProgressBar from \"./ProgressBar\";\nimport \"./Game.css\";\n\nconst PlayerCard = ({ player , onPlayerHit}) => {\n  const [isLarge, setIsLarge] = useState(true);\n   const [isHit, setIsHit] = useState(false);\n   const [isHeal, setIsHeal] = useState(false);\n\n  useEffect(() => {\n    if (isHit) {\n      setTimeout(() => {\n        setIsHit(false);\n        setIsHeal(false);\n      }, 500);\n    }\n  }, [isHit]);\n\n  const handleHit = () => {\n    setIsHit(true);\n    setIsHeal(true);\n    onPlayerHit(player);\n  };\n\n\n  return (\n    <div\n    className={`col-sm-3 card ${isLarge ? 'player-large' : ''} ${isHit ? 'hit-animation' : ''} ${isHit ? 'hit' : ''} ${isH ? 'hit-animation' : ''}${isHeal ? 'heal' : ''} `}\n    id={`joueur${player.id}`}\n    onClick={handleHit}\n  >\n  \n      <div className='card-body text-center'>\n        <img\n          className={`player-image ${isLarge ? 'player-image-large' : ''}`}\n          src={player.image ? require(`../assets/${player.image}`) : ''}\n          alt={player.name}\n        />\n\n        <h5 className='card-title'>{player.name}</h5>\n        <ProgressBar\n          pv={player.pv}\n          pvMax={player.pvMax}\n          faType='fa-heart'\n          barName=' : pv '\n          bgType='bg-danger'\n        />\n        <ProgressBar\n          pv={player.mana}\n          pvMax={player.manaMax}\n          faType='fa-fire-alt'\n          barName=' : mana '\n        />\n        <div className='row'>\n          {player.abilities.map((ability, index) => (\n            <ButtonCapacity key={index} player={player} ability={ability} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerCard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}