{"ast":null,"code":"const initialState = {\n  players: [{\n    name: \"John\",\n    pv: 100,\n    pvMax: 100,\n    mana: 30,\n    manaMax: 30,\n    id: 1,\n    abilities: [{\n      name: \"Frapper\",\n      damage: 10,\n      manaCost: 15,\n      type: \"damage\"\n    }, {\n      name: \"Guérir\",\n      heal: +10,\n      manaCost: 10,\n      type: \"heal\"\n    }, {\n      name: \"Attaque Special\",\n      damage: 15,\n      manaCost: 30,\n      type: \"fireBall\"\n    }, {\n      name: \"Recuperation Mana\",\n      mana: 30,\n      manaCost: 30,\n      // Utilisez un nombre négatif pour déduire le coût de mana\n      type: \"mana\"\n    }]\n  }, {\n    name: \"Jack\",\n    pv: 100,\n    pvMax: 100,\n    mana: 30,\n    manaMax: 30,\n    id: 2,\n    abilities: [{\n      name: \"Frapper\",\n      damage: 10,\n      manaCost: 15,\n      type: \"damage\"\n    }, {\n      name: \"Guérir\",\n      heal: +10,\n      manaCost: 10,\n      type: \"heal\"\n    }, {\n      name: \"Attaque Special\",\n      damage: 15,\n      manaCost: 30,\n      type: \"fireBall\"\n    }, {\n      name: \"Recuperation Mana\",\n      mana: 30,\n      manaCost: 30,\n      // Utilisez un nombre négatif pour déduire le coût de mana\n      type: \"mana\"\n    }]\n  }, {\n    name: \"Jessy\",\n    pv: 100,\n    pvMax: 100,\n    mana: 30,\n    manaMax: 30,\n    id: 3,\n    abilities: [{\n      name: \"Frapper\",\n      damage: 10,\n      manaCost: 15,\n      type: \"damage\"\n    }, {\n      name: \"Guérir\",\n      heal: +10,\n      manaCost: 10,\n      type: \"heal\"\n    }, {\n      name: \"Attaque Special\",\n      damage: 15,\n      manaCost: 30,\n      type: \"fireBall\"\n    }, {\n      name: \"Recuperation Mana\",\n      mana: 30,\n      manaCost: 30,\n      // Utilisez un nombre négatif pour déduire le coût de mana\n      type: \"mana\"\n    }]\n  }, {\n    name: \"Jenny\",\n    pv: 100,\n    pvMax: 100,\n    mana: 30,\n    manaMax: 30,\n    id: 4,\n    abilities: [{\n      name: \"Frapper\",\n      damage: 10,\n      manaCost: 15,\n      type: \"damage\"\n    }, {\n      name: \"Guérir\",\n      heal: +10,\n      manaCost: 10,\n      type: \"heal\"\n    }, {\n      name: \"Attaque Special\",\n      damage: 15,\n      manaCost: 30,\n      type: \"fireBall\"\n    }, {\n      name: \"Recuperation Mana\",\n      mana: +30,\n      manaCost: 30,\n      // Utilisez un nombre négatif pour déduire le coût de mana\n      type: \"mana\"\n    }]\n  }],\n  monster: {\n    pv: 800,\n    pvMax: 800\n  },\n  currentTurnPlayer: 1,\n  isPlayerDeadModalOpen: false\n};\nfunction rootReducer(state = initialState, action) {\n  const currentPlayerId = state.currentTurnPlayer;\n  switch (action.type) {\n    case \"HIT_MONSTER\":\n      const {\n        monsterDamage\n      } = action.payload;\n      return {\n        ...state,\n        monster: {\n          ...state.monster,\n          pv: Math.max(state.monster.pv - monsterDamage, 0)\n        }\n      };\n    case \"HIT_PLAYER\":\n      const {\n        damage\n      } = action.payload;\n      const attackingPlayer = state.players.find(player => player.id === action.payload.playerId);\n      if (attackingPlayer) {\n        const damageAbility = attackingPlayer.abilities.find(a => a.type === 'damage');\n        const manaCost = damageAbility ? damageAbility.manaCost : 0;\n        if (attackingPlayer.mana >= manaCost) {\n          const updatedPlayers = state.players.map(player => player.id === action.payload.playerId ? {\n            ...player,\n            pv: Math.max(Math.min(player.pv - damage, player.pvMax), 0),\n            mana: Math.max(player.mana - manaCost, 0)\n          } : player);\n          return {\n            ...state,\n            players: updatedPlayers\n          };\n        }\n      }\n\n      // Si le joueur n'a pas assez de mana ou si l'ability n'est pas trouvée, retournez simplement l'état actuel\n      return state;\n    case \"HEAL_PLAYER\":\n      const {\n        healPlayer\n      } = action.payload;\n      return {\n        ...state,\n        players: state.players.map(player => {\n          if (player.id === healPlayer.id) {\n            return {\n              ...player,\n              pv: Math.min(player.pv + healPlayer.heal, player.pvMax)\n            };\n          }\n          return player;\n        })\n      };\n    case \"FIRE_BALL\":\n      const currentPlayer = state.players.find(player => player.id === currentPlayerId);\n      if (currentPlayer && !currentPlayer.hasPerformedAction) {\n        const {\n          fireBall\n        } = action.payload;\n        const updatedPlayers = state.players.map(player => player.id === fireBall.id ? {\n          ...player,\n          pv: Math.max(player.pv - fireBall.damage, 0),\n          mana: Math.max(player.mana - fireBall.manaCost, 0),\n          hasPerformedAction: true\n        } : player);\n        return {\n          ...state,\n          players: updatedPlayers,\n          monster: {\n            ...state.monster,\n            pv: Math.max(state.monster.pv - fireBall.damage, 0)\n          }\n        };\n      }\n      return state;\n    case \"MANA_PLAYER\":\n      const {\n        manaPlayer\n      } = action.payload;\n      return {\n        ...state,\n        players: state.players.map(player => {\n          if (player.id === manaPlayer.id) {\n            return {\n              ...player,\n              mana: Math.min(player.mana + manaPlayer.mana, player.manaMax)\n            };\n          }\n          return player;\n        })\n      };\n    case \"NEXT_TURN\":\n      const nextTurnPlayerId = currentPlayerId % state.players.length + 1;\n      const resetPlayers = state.players.map(player => ({\n        ...player,\n        hasPerformedAction: false\n      }));\n      return {\n        ...state,\n        players: resetPlayers,\n        currentTurnPlayer: nextTurnPlayerId\n      };\n    case \"PLAYER_DEAD\":\n      const {\n        playerId\n      } = action.payload;\n      const updatedPlayers = state.players.map(player => ({\n        ...player,\n        pv: player.id === playerId ? 0 : player.pv\n      }));\n      const nextTurnPlayerIdAfterDeath = currentPlayerId % updatedPlayers.length + 1;\n      return {\n        ...state,\n        players: updatedPlayers,\n        currentTurnPlayer: nextTurnPlayerIdAfterDeath,\n        isPlayerDeadModalOpen: true\n      };\n    case \"CLOSE_PLAYER_DEAD_MODAL\":\n      return {\n        ...state,\n        isPlayerDeadModalOpen: false\n      };\n    default:\n      return state;\n  }\n}\nexport default rootReducer;","map":{"version":3,"names":["initialState","players","name","pv","pvMax","mana","manaMax","id","abilities","damage","manaCost","type","heal","monster","currentTurnPlayer","isPlayerDeadModalOpen","rootReducer","state","action","currentPlayerId","monsterDamage","payload","Math","max","attackingPlayer","find","player","playerId","damageAbility","a","updatedPlayers","map","min","healPlayer","currentPlayer","hasPerformedAction","fireBall","manaPlayer","nextTurnPlayerId","length","resetPlayers","nextTurnPlayerIdAfterDeath"],"sources":["/home/g404/Documents/Random-Rumblee/src/store/rootReducer.js"],"sourcesContent":["const initialState = {\n  players: [\n    {\n      name: \"John\",\n      pv: 100,\n      pvMax: 100,\n      mana: 30,\n      manaMax: 30,\n      id: 1,\n      abilities: [\n        {\n          name:\n            \"Frapper\",\n          damage: 10,\n          manaCost: 15,\n          type: \"damage\"\n        },\n        {\n          name: \"Guérir\",\n          heal: +10,\n          manaCost: 10,\n          type: \"heal\"\n        },\n        {\n          name: \"Attaque Special\",\n          damage: 15,\n          manaCost: 30,\n          type: \"fireBall\"\n        },\n        {\n          name: \"Recuperation Mana\",\n          mana: 30,\n          manaCost: 30, // Utilisez un nombre négatif pour déduire le coût de mana\n          type: \"mana\"\n        }\n\n      ],\n    },\n    {\n      name: \"Jack\",\n      pv: 100,\n      pvMax: 100,\n      mana: 30,\n      manaMax: 30,\n      id: 2,\n      abilities: [\n        {\n          name:\n            \"Frapper\",\n          damage: 10,\n          manaCost: 15,\n          type: \"damage\"\n        },\n        {\n          name: \"Guérir\",\n          heal: +10,\n          manaCost: 10,\n          type: \"heal\"\n        },\n        {\n          name: \"Attaque Special\",\n          damage: 15,\n          manaCost: 30,\n          type: \"fireBall\"\n        },\n        {\n          name: \"Recuperation Mana\",\n          mana: 30,\n          manaCost: 30, // Utilisez un nombre négatif pour déduire le coût de mana\n          type: \"mana\"\n        }\n\n      ],\n    },\n    {\n      name: \"Jessy\",\n      pv: 100,\n      pvMax: 100,\n      mana: 30,\n      manaMax: 30,\n      id: 3,\n      abilities: [\n        {\n          name:\n            \"Frapper\",\n          damage: 10,\n          manaCost: 15,\n          type: \"damage\"\n        },\n        {\n          name: \"Guérir\",\n          heal: +10,\n          manaCost: 10,\n          type: \"heal\"\n        },\n        {\n          name: \"Attaque Special\",\n          damage: 15,\n          manaCost: 30,\n          type: \"fireBall\"\n        },\n        {\n          name: \"Recuperation Mana\",\n          mana: 30,\n          manaCost: 30, // Utilisez un nombre négatif pour déduire le coût de mana\n          type: \"mana\"\n        }\n\n      ],\n    },\n    {\n      name: \"Jenny\",\n      pv: 100,\n      pvMax: 100,\n      mana: 30,\n      manaMax: 30,\n      id: 4,\n      abilities: [\n        {\n          name:\n            \"Frapper\",\n          damage: 10,\n          manaCost: 15,\n          type: \"damage\"\n        },\n        {\n          name: \"Guérir\",\n          heal: +10,\n          manaCost: 10,\n          type: \"heal\"\n        },\n        {\n          name: \"Attaque Special\",\n          damage: 15,\n          manaCost: 30,\n          type: \"fireBall\"\n        },\n        {\n          name: \"Recuperation Mana\",\n          mana: +30,\n          manaCost: 30, // Utilisez un nombre négatif pour déduire le coût de mana\n          type: \"mana\"\n        }\n\n      ],\n    },\n  ],\n\n  monster: {\n    pv: 800,\n    pvMax: 800,\n  },\n  currentTurnPlayer: 1,\n  isPlayerDeadModalOpen: false,\n};\n\nfunction rootReducer(state = initialState, action) {\n  const currentPlayerId = state.currentTurnPlayer;\n\n  switch (action.type) {\n    case \"HIT_MONSTER\":\n      const { monsterDamage } = action.payload;\n      return {\n        ...state,\n        monster: {\n          ...state.monster,\n          pv: Math.max(state.monster.pv - monsterDamage, 0),\n        },\n      };\n\n    case \"HIT_PLAYER\":\n      const { damage } = action.payload;\n      const attackingPlayer = state.players.find(player => player.id === action.payload.playerId);\n\n      if (attackingPlayer) {\n        const damageAbility = attackingPlayer.abilities.find(a => a.type === 'damage');\n        const manaCost = damageAbility ? damageAbility.manaCost : 0;\n\n        if (attackingPlayer.mana >= manaCost) {\n          const updatedPlayers = state.players.map((player) =>\n            player.id === action.payload.playerId\n              ? {\n                ...player,\n                pv: Math.max(Math.min(player.pv - damage, player.pvMax), 0),\n                mana: Math.max(player.mana - manaCost, 0),\n              }\n              : player\n          );\n\n          return {\n            ...state,\n            players: updatedPlayers,\n          };\n        }\n      }\n\n      // Si le joueur n'a pas assez de mana ou si l'ability n'est pas trouvée, retournez simplement l'état actuel\n      return state;\n\n    case \"HEAL_PLAYER\":\n      const { healPlayer } = action.payload;\n      return {\n        ...state,\n        players: state.players.map((player) => {\n          if (player.id === healPlayer.id) {\n            return {\n              ...player,\n              pv: Math.min(player.pv + healPlayer.heal, player.pvMax),\n            };\n          }\n          return player;\n        }),\n      };\n\n    case \"FIRE_BALL\":\n      const currentPlayer = state.players.find(player => player.id === currentPlayerId);\n\n      if (currentPlayer && !currentPlayer.hasPerformedAction) {\n        const { fireBall } = action.payload;\n        const updatedPlayers = state.players.map(player =>\n          player.id === fireBall.id\n            ? {\n              ...player,\n              pv: Math.max(player.pv - fireBall.damage, 0),\n              mana: Math.max(player.mana - fireBall.manaCost, 0),\n              hasPerformedAction: true,\n            }\n            : player\n        );\n\n        return {\n          ...state,\n          players: updatedPlayers,\n          monster: {\n            ...state.monster,\n            pv: Math.max(state.monster.pv - fireBall.damage, 0),\n          },\n        };\n      }\n      return state;\n\n    case \"MANA_PLAYER\":\n      const { manaPlayer } = action.payload;\n      return {\n        ...state,\n        players: state.players.map((player) => {\n          if (player.id === manaPlayer.id) {\n            return {\n              ...player,\n              mana: Math.min(player.mana + manaPlayer.mana, player.manaMax),\n            };\n          }\n          return player;\n        }),\n      };\n\n    case \"NEXT_TURN\":\n      const nextTurnPlayerId = (currentPlayerId % state.players.length) + 1;\n\n      const resetPlayers = state.players.map((player) => ({\n        ...player,\n        hasPerformedAction: false,\n      }));\n\n      return {\n        ...state,\n        players: resetPlayers,\n        currentTurnPlayer: nextTurnPlayerId,\n      };\n\n      case \"PLAYER_DEAD\":\n        const { playerId } = action.payload;\n        const updatedPlayers = state.players.map((player) => ({\n          ...player,\n          pv: player.id === playerId ? 0 : player.pv,\n        }));\n      \n        const nextTurnPlayerIdAfterDeath = (currentPlayerId % updatedPlayers.length) + 1;\n      \n        return {\n          ...state,\n          players: updatedPlayers,\n          currentTurnPlayer: nextTurnPlayerIdAfterDeath,\n          isPlayerDeadModalOpen: true,\n        };\n      \n      case \"CLOSE_PLAYER_DEAD_MODAL\": \n        return {\n          ...state,\n          isPlayerDeadModalOpen: false,\n        };\n      \n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}