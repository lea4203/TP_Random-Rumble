{"ast":null,"code":"var _jsxFileName = \"/home/g404/Documents/Random-Rumblee/src/Components/ButtonCapacity.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ButtonCapacity = ({\n  player,\n  ability\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const hitMonster = () => {\n    dispatch({\n      type: \"HIT_MONSTER\",\n      payload: {\n        monsterDamage: 10\n      }\n    });\n  };\n  const hitPlayer = () => {\n    dispatch({\n      type: \"HIT_PLAYER\",\n      payload: {\n        damage: ability.damage,\n        playerId: player.id\n      }\n    });\n  };\n  const healPlayer = () => {\n    dispatch({\n      type: \"HEAL_PLAYER\",\n      payload: {\n        healPlayer: {\n          heal: 10,\n          id: player.id,\n          manaCost: ability.manaCost,\n          maxHealth: 100\n        }\n      }\n    });\n  };\n  const attackSpecial = () => {\n    dispatch({\n      type: \"FIRE_BALL\",\n      payload: {\n        fireBall: {\n          damage: 20,\n          id: player.id,\n          manaCost: ability.manaCost\n        }\n      }\n    });\n  };\n  const manaPlayer = () => {\n    dispatch({\n      type: \"MANA_PLAYER\",\n      payload: {\n        manaPlayer: {\n          mana: 10,\n          id: player.id,\n          manaCost: ability.manaCost\n        }\n      }\n    });\n  };\n  const nextTurn = () => {\n    dispatch({\n      type: \"NEXT_TURN\"\n    });\n  };\n  const handleCapacity = () => {\n    switch (ability.type) {\n      case \"damage\":\n        // Check if the player has health points before hitting the monster\n        if (player.pv > 0) {\n          dispatch({\n            type: \"HIT_MONSTER\",\n            payload: {\n              monsterDamage: ability.damage\n            }\n          });\n        }\n        dispatch({\n          type: \"HIT_PLAYER\",\n          payload: {\n            damage: ability.damage,\n            playerId: player.id\n          }\n        });\n        break;\n      case \"heal\":\n        dispatch({\n          type: \"HEAL_PLAYER\",\n          payload: {\n            healPlayer: {\n              heal: ability.heal,\n              id: player.id,\n              manaCost: ability.manaCost,\n              maxHealth: 100\n            }\n          }\n        });\n        break;\n      case \"fireBall\":\n        // Check if the player has enough mana before casting the fireball\n        const updatedManaCost = Math.min(ability.manaCost, player.mana);\n        if (player.mana >= updatedManaCost) {\n          dispatch({\n            type: \"FIRE_BALL\",\n            payload: {\n              fireBall: {\n                damage: ability.damage,\n                id: player.id,\n                manaCost: updatedManaCost\n              }\n            }\n          });\n          dispatch({\n            type: \"MANA_PLAYER\",\n            payload: {\n              manaPlayer: {\n                mana: ability.mana,\n                id: player.id,\n                manaCost: updatedManaCost\n              }\n            }\n          });\n        } else {\n          console.log(\"Not enough mana to cast the fireball.\");\n        }\n        break;\n      case \"mana\":\n        dispatch({\n          type: \"MANA_PLAYER\",\n          payload: {\n            manaPlayer: {\n              mana: ability.mana,\n              id: player.id,\n              manaCost: ability.manaCost\n            }\n          }\n        });\n        break;\n      case \"nextTurn\":\n        dispatch({\n          type: \"NEXT_TURN\"\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  const getButtonClassName = () => {\n    switch (ability.type) {\n      case \"heal\":\n        return \"btn btn-danger m-1 btn-heal\";\n      // Red for healing\n      case \"damage\":\n        return \"btn btn-success m-1 btn-attack\";\n      // Green for damage\n      case \"fireBall\":\n        return \"btn btn-warning m-1 btn-fireball\";\n      case \"mana\":\n        return \"btn btn-info m-1 btn-mana\";\n      default:\n        return \"btn btn-secondary m-1\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    onClick: handleCapacity,\n    className: getButtonClassName(),\n    disabled: false,\n    children: [ability.name, \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n      className: ability.type === \"heal\" ? \"fas fa-heart\" : \"fas fa-bomb\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), \" \", ability.type === \"heal\" ? `+${ability.heal}` : ability.damage, \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fas fa-fire-alt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), \" - \", ability.manaCost, \" Mana\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(ButtonCapacity, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n_c = ButtonCapacity;\nexport default ButtonCapacity;\nvar _c;\n$RefreshReg$(_c, \"ButtonCapacity\");","map":{"version":3,"names":["React","useDispatch","jsxDEV","_jsxDEV","ButtonCapacity","player","ability","_s","dispatch","hitMonster","type","payload","monsterDamage","hitPlayer","damage","playerId","id","healPlayer","heal","manaCost","maxHealth","attackSpecial","fireBall","manaPlayer","mana","nextTurn","handleCapacity","pv","updatedManaCost","Math","min","console","log","getButtonClassName","onClick","className","disabled","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/g404/Documents/Random-Rumblee/src/Components/ButtonCapacity.js"],"sourcesContent":["import React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nconst ButtonCapacity = ({ player, ability }) => {\n  const dispatch = useDispatch();\n\n  const hitMonster = () => {\n    dispatch({ type: \"HIT_MONSTER\", payload: { monsterDamage: 10 } });\n  };\n\n  const hitPlayer = () => {\n    dispatch({\n      type: \"HIT_PLAYER\",\n      payload: { damage: ability.damage, playerId: player.id },\n    });\n  };\n\n  const healPlayer = () => {\n    dispatch({\n      type: \"HEAL_PLAYER\",\n      payload: {\n        healPlayer: {\n          heal: 10,\n          id: player.id,\n          manaCost: ability.manaCost,\n          maxHealth: 100,\n        },\n      },\n    });\n  };\n\n  const attackSpecial = () => {\n    dispatch({\n      type: \"FIRE_BALL\",\n      payload: { fireBall: { damage: 20, id: player.id, manaCost: ability.manaCost } },\n    });\n  };\n\n  const manaPlayer = () => {\n    dispatch({\n      type: \"MANA_PLAYER\",\n      payload: {\n        manaPlayer: {\n          mana: 10,\n          id: player.id,\n          manaCost: ability.manaCost,\n        },\n      },\n    });\n  };\n\n  const nextTurn = () => {\n    dispatch({ type: \"NEXT_TURN\" });\n  };\n\n  const handleCapacity = () => {\n    switch (ability.type) {\n      case \"damage\":\n        // Check if the player has health points before hitting the monster\n        if (player.pv > 0) {\n          dispatch({ type: \"HIT_MONSTER\", payload: { monsterDamage: ability.damage } });\n        }\n        dispatch({\n          type: \"HIT_PLAYER\",\n          payload: { damage: ability.damage, playerId: player.id },\n        });\n        break;\n      case \"heal\":\n        dispatch({\n          type: \"HEAL_PLAYER\",\n          payload: {\n            healPlayer: {\n              heal: ability.heal,\n              id: player.id,\n              manaCost: ability.manaCost,\n              maxHealth: 100,\n            },\n          },\n        });\n        break;\n      case \"fireBall\":\n        // Check if the player has enough mana before casting the fireball\n        const updatedManaCost = Math.min(ability.manaCost, player.mana);\n        if (player.mana >= updatedManaCost) {\n          dispatch({\n            type: \"FIRE_BALL\",\n            payload: { fireBall: { damage: ability.damage, id: player.id, manaCost: updatedManaCost } },\n          });\n          dispatch({\n            type: \"MANA_PLAYER\",\n            payload: {\n              manaPlayer: {\n                mana: ability.mana,\n                id: player.id,\n                manaCost: updatedManaCost,\n              },\n            },\n          });\n        } else {\n          console.log(\"Not enough mana to cast the fireball.\");\n        }\n        break;\n      case \"mana\":\n        dispatch({\n          type: \"MANA_PLAYER\",\n          payload: {\n            manaPlayer: {\n              mana: ability.mana,\n              id: player.id,\n              manaCost: ability.manaCost,\n            },\n          },\n        });\n        break;\n      case \"nextTurn\":\n        dispatch({ type: \"NEXT_TURN\" });\n        break;\n      default:\n        break;\n    }\n  };\n\n  const getButtonClassName = () => {\n    switch (ability.type) {\n      case \"heal\":\n        return \"btn btn-danger m-1 btn-heal\"; // Red for healing\n      case \"damage\":\n        return \"btn btn-success m-1 btn-attack\"; // Green for damage\n      case \"fireBall\":\n        return \"btn btn-warning m-1 btn-fireball\";\n      case \"mana\":\n        return \"btn btn-info m-1 btn-mana\";\n      default:\n        return \"btn btn-secondary m-1\";\n    }\n  };\n\n  return (\n    <button\n      type=\"button\"\n      onClick={handleCapacity}\n      className={getButtonClassName()}\n      disabled={false}\n    >\n      {ability.name}{\" \"}\n      <i className={ability.type === \"heal\" ? \"fas fa-heart\" : \"fas fa-bomb\"}></i>{\" \"}\n      {ability.type === \"heal\" ? `+${ability.heal}` : ability.damage}{\" \"}\n      <i className=\"fas fa-fire-alt\"></i> - {ability.manaCost} Mana\n    </button>\n  );\n};\n\nexport default ButtonCapacity;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}