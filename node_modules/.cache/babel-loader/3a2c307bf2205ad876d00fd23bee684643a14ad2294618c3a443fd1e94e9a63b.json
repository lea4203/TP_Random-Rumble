{"ast":null,"code":"function rootReducer(state = initialState, action) {\n  const currentPlayerId = state.currentTurnPlayer;\n  switch (action.type) {\n    case \"HIT_MONSTER\":\n      const {\n        monsterDamage\n      } = action.payload; // Renommez la variable\n      return {\n        ...state,\n        monster: {\n          ...state.monster,\n          pv: Math.max(state.monster.pv - monsterDamage, 0)\n        }\n      };\n    case \"HIT_PLAYER\":\n      const {\n        damage,\n        playerId\n      } = action.payload;\n      const updatedPlayers = state.players.map(player => player.id === playerId ? {\n        ...player,\n        pv: Math.max(Math.min(player.pv - damage, player.pvMax), 0),\n        mana: Math.max(player.mana - player.abilities.find(a => a.type === 'damage').manaCost, 0)\n      } : player);\n      return {\n        ...state,\n        players: updatedPlayers\n      };\n    case \"HEAL_PLAYER\":\n      const {\n        healPlayer\n      } = action.payload;\n      return {\n        ...state,\n        players: state.players.map(player => {\n          if (player.id === healPlayer.id) {\n            return {\n              ...player,\n              pv: Math.min(player.pv + healPlayer.heal, player.pvMax)\n            };\n          }\n          return player;\n        })\n      };\n    case \"FIRE_BALL\":\n      const currentPlayer = state.players.find(player => player.id === currentPlayerId);\n      if (currentPlayer && !currentPlayer.hasPerformedAction) {\n        const {\n          fireBall\n        } = action.payload;\n        const updatedPlayers = state.players.map(player => player.id === fireBall.id ? {\n          ...player,\n          pv: Math.max(player.pv - fireBall.damage, 0),\n          mana: Math.max(player.mana - fireBall.manaCost, 0),\n          hasPerformedAction: true\n        } : player);\n        return {\n          ...state,\n          players: updatedPlayers,\n          monster: {\n            ...state.monster,\n            pv: Math.max(state.monster.pv - fireBall.damage, 0)\n          }\n        };\n      }\n      return state;\n    case \"MANA_PLAYER\":\n      const {\n        manaPlayer\n      } = action.payload;\n      return {\n        ...state,\n        players: state.players.map(player => {\n          if (player.id === manaPlayer.id) {\n            return {\n              ...player,\n              mana: Math.min(player.mana + manaPlayer.mana, player.manaMax)\n            };\n          }\n          return player;\n        })\n      };\n    case \"NEXT_TURN\":\n      const nextTurnPlayerId = currentPlayerId % state.players.length + 1;\n      const resetPlayers = state.players.map(player => ({\n        ...player,\n        hasPerformedAction: false\n      }));\n      return {\n        ...state,\n        players: resetPlayers,\n        currentTurnPlayer: nextTurnPlayerId\n      };\n    default:\n      return state;\n  }\n}\nexport default rootReducer;","map":{"version":3,"names":["rootReducer","state","initialState","action","currentPlayerId","currentTurnPlayer","type","monsterDamage","payload","monster","pv","Math","max","damage","playerId","updatedPlayers","players","map","player","id","min","pvMax","mana","abilities","find","a","manaCost","healPlayer","heal","currentPlayer","hasPerformedAction","fireBall","manaPlayer","manaMax","nextTurnPlayerId","length","resetPlayers"],"sources":["/home/g404/Documents/Random-Rumblee/src/store/rootReducer.js"],"sourcesContent":["function rootReducer(state = initialState, action) {\n  const currentPlayerId = state.currentTurnPlayer;\n\n  switch (action.type) {\n    case \"HIT_MONSTER\":\n      const { monsterDamage } = action.payload; // Renommez la variable\n      return {\n        ...state,\n        monster: {\n          ...state.monster,\n          pv: Math.max(state.monster.pv - monsterDamage, 0),\n        },\n      };\n\n    case \"HIT_PLAYER\":\n      const { damage, playerId } = action.payload;\n      const updatedPlayers = state.players.map((player) =>\n        player.id === playerId\n          ? {\n            ...player,\n            pv: Math.max(Math.min(player.pv - damage, player.pvMax), 0),\n            mana: Math.max(player.mana - player.abilities.find(a => a.type === 'damage').manaCost, 0),\n          }\n          : player\n      );\n\n      return {\n        ...state,\n        players: updatedPlayers,\n      };\n\n    case \"HEAL_PLAYER\":\n      const { healPlayer } = action.payload;\n      return {\n        ...state,\n        players: state.players.map((player) => {\n          if (player.id === healPlayer.id) {\n            return {\n              ...player,\n              pv: Math.min(player.pv + healPlayer.heal, player.pvMax),\n            };\n          }\n          return player;\n        }),\n      };\n\n    case \"FIRE_BALL\":\n      const currentPlayer = state.players.find(player => player.id === currentPlayerId);\n\n      if (currentPlayer && !currentPlayer.hasPerformedAction) {\n        const { fireBall } = action.payload;\n        const updatedPlayers = state.players.map(player =>\n          player.id === fireBall.id\n            ? {\n              ...player,\n              pv: Math.max(player.pv - fireBall.damage, 0),\n              mana: Math.max(player.mana - fireBall.manaCost, 0),\n              hasPerformedAction: true,\n            }\n            : player\n        );\n\n        return {\n          ...state,\n          players: updatedPlayers,\n          monster: {\n            ...state.monster,\n            pv: Math.max(state.monster.pv - fireBall.damage, 0),\n          },\n        };\n      }\n      return state;\n\n    case \"MANA_PLAYER\":\n      const { manaPlayer } = action.payload;\n      return {\n        ...state,\n        players: state.players.map((player) => {\n          if (player.id === manaPlayer.id) {\n            return {\n              ...player,\n              mana: Math.min(player.mana + manaPlayer.mana, player.manaMax),\n            };\n          }\n          return player;\n        }),\n      };\n\n    case \"NEXT_TURN\":\n      const nextTurnPlayerId = (currentPlayerId % state.players.length) + 1;\n\n      const resetPlayers = state.players.map((player) => ({\n        ...player,\n        hasPerformedAction: false,\n      }));\n\n      return {\n        ...state,\n        players: resetPlayers,\n        currentTurnPlayer: nextTurnPlayerId,\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}